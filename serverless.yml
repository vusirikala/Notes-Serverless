service: notes
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

plugins: 
  - serverless-iam-roles-per-function

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createNote:
    handler: handler.createNote
    events:
      - httpApi:
          path: /notes
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: {"Fn::GetAtt" : [ "NotesTable", "Arn" ]}  #Getting ARN from logical name of the table
  getNote:
    handler: handler.getNote
    events:
      - httpApi:
          path: /notes/{id}
          method: get
  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable   #Getting the name of the table from its logical name
    events:
      - httpApi:
          path: /notes/{id}
          method: put
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: {"Fn::GetAtt" : [ "NotesTable", "Arn" ]}  #Getting ARN from logical name of the table
  deleteNote:
    handler: handler.deleteNote
    events:
      - httpApi:
          path: /notes/{id}
          method: delete
    
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
   NotesTable:
     Type: AWS::DynamoDB::Table
     Properties:
      AttributeDefinitions:
        - AttributeName: notesId
          AttributeType: S
      KeySchema:
        - AttributeName: notesId
          KeyType: HASH             # We will use notesId as hash key. 
      TableName: notes
      BillingMode: PAY_PER_REQUEST

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
